---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---

# {{.Name}} ({{.Type}})
{{ .Description | trimspace }}
- AWS connection for role delegation will be created with `access_type="role_delegation"` and `account_id`.
- AWS connection for access key will be created with `access_type="access_key"`, `access_key_id`, `secret_access_key`.
- To attach the `role_name` for role delegation user has to create resource `appdynamicscloud_connection_aws` for role delegation and resource `appdynamicscloud_connection_aws_role_attachment` with `role_name`.  
- Supported [Services](#table--services) are listed below.

~> **Note:** In case of Role Delegation AWS Connection the state will remain as `INCOMPLETE` until the role attachment is done. Once user attach role_name using resource `appdynamicscloud_connection_aws_role_attachment` the state will change to `CONFIGURED`. Once the state becomes `CONFIGURED`, user can change state to `ACTIVE` by terraform apply. If user does not attach role_name using resource `appdynamicscloud_connection_aws_role_attachment` the state will remain to `INCOMPLETE` and the resource will forces replace state.

{{ if .HasExample -}}
## Example Usage

### Example for Role Delegation AWS Connection.
```terraform

resource "appdynamicscloud_connection_aws" "example1" {
  display_name = "AWS Dev"
  description  = "Description for this AWS connection"
  state        = "ACTIVE"

  connection_details {
    access_type = "role_delegation"
    account_id  = "xxxxxxxxxxxx"
  }

  configuration_details {
    import_tags {
      enabled       = true
      excluded_keys = ["key1", "key2"]
    }
    tag_filter = "(tags(env) = 'prod' || tags(env) = 'production')) && tags(project) = 'cloudcollectors'"
    regions    = ["us-east-1", "us-west-1"]
    polling {
      interval = 5
      unit     = "minute"
    }

    services {
      name = "ebs"
      import_tags {
        enabled       = false
        excluded_keys = []
      }
      tag_filter = "tags(project) = 'cloudcollectors' && tags(jira) IN ['XTNSBL','ACE'] && !(tags(region) IN ['US','IN']) && HAS tags(monitorEnabled) && !(HAS tags(restrictedUse)"
      polling {
        interval = 5
        unit     = "minute"
      }
    }
    services {
      name = "ec2"
      import_tags {
        enabled       = true
        excluded_keys = ["key1", "key2"]
      }
      polling {
        interval = 5
        unit     = "minute"
      }
      tag_filter = "tags(project) = 'cloudcollectors' && tags(jira) IN ['XTNSBL','ACE'] && !(tags(region) IN ['US','IN']) && HAS tags(monitorEnabled) && !(HAS tags(restrictedUse)"
    }
  }
}
```

### Example for Access Key AWS Connection.
```terraform

resource "appdynamicscloud_connection_aws" "example2" {
  display_name = "AWS Dev"
  description  = "Description for this AWS connection"
  state        = "ACTIVE"

  connection_details {
    access_type       = "access_key"
    access_key_id     = "xxxxxxxxxxxxxxxxxxx"
    secret_access_key = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
  }

  configuration_details {
    import_tags {
      enabled       = true
      excluded_keys = ["key1", "key2"]
    }
    tag_filter = "(tags(env) = 'prod' || tags(env) = 'production')) && tags(project) = 'cloudcollectors'"
    regions    = ["us-east-1", "us-west-1"]
    polling {
      interval = 5
      unit     = "minute"
    }

    services {
      name = "ebs"
      import_tags {
        enabled       = false
        excluded_keys = []
      }
      tag_filter = "tags(project) = 'cloudcollectors' && tags(jira) IN ['XTNSBL','ACE'] && !(tags(region) IN ['US','IN']) && HAS tags(monitorEnabled) && !(HAS tags(restrictedUse)"
      polling {
        interval = 5
        unit     = "minute"
      }
    }
    services {
      name = "ec2"
      import_tags {
        enabled       = true
        excluded_keys = ["key1", "key2"]
      }
      polling {
        interval = 5
        unit     = "minute"
      }
      tag_filter = "tags(project) = 'cloudcollectors' && tags(jira) IN ['XTNSBL','ACE'] && !(tags(region) IN ['US','IN']) && HAS tags(monitorEnabled) && !(HAS tags(restrictedUse)"
    }
  }
}
```
{{- end }}

{{ .SchemaMarkdown | trimspace }}

## Import

Import is supported using the following syntax:

{{codefile "shell" "examples/resources/appdynamicscloud_connection_aws/import.sh"}}


<a id="table--services"></a>
### AWS Services
| Display Name                      | ID  |
|-----------------------------------|-----|
| Elastic Cloud Compute             | ec2 |
| Elastic Load Balancing            | elb |
| Elastic Block Storage             | ebs |
| Amazon Relational Database Service| rds |
| Amazon Elastic Container Service  | ecs |
